#!/usr/bin/env bash
 
 
# libs
function rich_echo() {
    color=$1
    shift 1
    text="[$(date +'%Y/%m/%d %H:%M:%S')] $*"
    case ${color} in
    black)
        echo -e "\033[30m${text} \033[0m" | tee -a repo_management.log
        ;;
    red)
        echo -e "\033[31m${text} \033[0m" | tee -a repo_management.log
        ;;
    green)
        echo -e "\033[32m${text} \033[0m" | tee -a repo_management.log
        ;;
    yellow)
        echo -e "\033[33m${text} \033[0m" | tee -a repo_management.log
        ;;
    blue)
        echo -e "\033[34m${text} \033[0m" | tee -a repo_management.log
        ;;
    purple)
        echo -e "\033[35m${text} \033[0m" | tee -a repo_management.log
        ;;
    skyblue)
        echo -e "\033[36m${text} \033[0m" | tee -a repo_management.log
        ;;
    print)
        echo -e "\033[36m$* \033[0m" | tee -a repo_management.log
        ;;
    white)
        echo -e "\033[37m${text} \033[0m" | tee -a repo_management.log
        ;;
    *)
        echo -e "\033[30m${text} \033[0m" | tee -a repo_management.log
        ;;
    esac
}
 
function usage() {
    # shellcheck disable=SC2199
    rich_echo print "Usage:"
    rich_echo print "    bash $0 <command> [<args>] [-h]"
    rich_echo print "Available commands are: add|switch|list|delete"
    rich_echo print "   add             add jfrog repository"
    rich_echo print "   switch          switch repository between jfrog and rmc"
    rich_echo print "   list            list current added repositories"
    rich_echo print "   delete          delete repository"
    rich_echo print "Options:"
    rich_echo print "    -U --user,             Jfrog User"
    rich_echo print "    -T --token,            JFrog User Token"
    rich_echo print "    -O --os,               Repo OS Type"
    rich_echo print "    -K --gpgkey,           Jfrog Repo GPG Key"
    rich_echo print "    -R --url,              Jfrog Repo URL without https://"
    rich_echo print "    -C --component,        Jfrog Repo Component, works for ubuntu, default is focal main"
    rich_echo print "    -D --destrepo,         Dest Switch Repo"
    rich_echo print "    -h --help,             To display this information"
    rich_echo print "    -V --verbose,          Verbose Mode, set -xv"
    rich_echo print "    bash $0 <command> [Options]."
    rich_echo print "Example:"
    rich_echo print "    bash $0 add --os rhel8 --user user --token token --gpgkey https://cmse4ext.webex.com/rmc/prod/gpg_public_key.pub"
    rich_echo print "    bash $0 add --os ubuntu20 --user user --token token --gpgkey https://cmse4ext.webex.com/rmc/deb.pub"
    rich_echo print "    bash $0 switch --os ubuntu20 --destrepo rmc"
    exit 0
}
 
[[ $# -eq 0 ]] && usage
 
# CONSTANT VARIABLE
RHEL8_JFROG_REPO_FILE='/etc/yum.repos.d/w4d_rpm.repo'
RHEL8_JFROG_RMC_FILE=/etc/yum.repos.d/prod*.repo
RHEL8_JFROG_REPO_GPGKEY='/etc/pki/rpm-gpg/gpg_public_key.pub'
UBUNTU_JFROG_REPO_FILE='/etc/apt/sources.list.d/w4d-jfrog.list'
UBUNTU_RMC_REPO_FILE='/etc/apt/sources.list.d/rmc-external.list'
UBUNTU_JFROG_REPO_AUTH_FILE='/etc/apt/auth.conf'
 
# functions
# get runtime parameters
function get_opts(){
    options=$(getopt -a -l "os:,user:,token:,url:,gpgkey:,component:,destrepo:,help,verbose" -o "O:U:T:K:R:C:D:hV" -- "$@")
    # set --:
    # If no arguments follow this option, then the positional parameters are unset. Otherwise, the positional parameters
    # are set to the arguments, even if some of them begin with a ‘-’.
    if ! eval set -- "$options" ; then echo "Terminating..." >&2 ; exit 1 ; fi
    while true; do
        case ${1} in
            -U|--user)
                shift
                jfrog_user="${1}"
                rich_echo skyblue "Input Jfrog User: ${jfrog_user}"
                ;;
            -T|--token)
                shift
                jfrog_token=${1}
                rich_echo skyblue "Input Jfrog Token: *****************"
                ;;
            -R|--url)
                shift
                jfrog_url=${1:-"default"}
                rich_echo skyblue "Input Jfrog Url: ${jfrog_url}"
                ;;
            -K|--gpgkey)
                shift
                gpgkey=${1}
                rich_echo skyblue "Input gpgkey: ${gpgkey}"
                ;;
            -O|--os)
                shift
                os_type=${1}
                rich_echo skyblue "Input OS Type: ${os_type}"
                ;;
            -C|--component)
                shift
                repo_component=${1:-"focal main"}
                rich_echo skyblue "Input Repo Component: ${repo_component}"
                ;;
            -D|--destrepo)
                shift
                destrepo=${1}
                rich_echo skyblue "Input Switch Dest Repo: ${destrepo}"
                ;;
            -V|--verbose)
                verbose=1
                echo "verbose: ${verbose}"
                set -xv  # Set trace and verbose mode.
                ;;
            -h|--help ) usage ;;
            --)
                shift
                break
                ;;
            \?)
                echo "Invalid Option: -$OPTARG" 1>&2
                exit 1
                ;;
        esac
        shift
    done
}
 
function ubuntu_certificate_switch(){
    cert_file='/etc/ca-certificates.conf'
    cert_bak_file='/etc/ca-certificates.conf_original'
    case $1 in
    on)
        if [[ ! -f ${/etc/ca-certificates.conf_original} ]]; then
            rich_echo yellow "Switch Certificate On requires ${cert_bak_file}"
        else
            mv ${cert_bak_file} ${cert_file}
            update-ca-certificates > /dev/null
            rich_echo skyblue "Switch Certificate On Successfully"
        fi
        ;;
    off)
        rm -f ${cert_bak_file}
        cp ${cert_file} ${cert_bak_file}
        sed -i 's/^!//g' /etc/ca-certificates.conf
        update-ca-certificates > /dev/null
        rich_echo skyblue "Switch Certificate Off Successfully"
        ;;
    *)
        rich_echo red "Only on|off available."
        exit 127
        ;;
    esac
}
function repo_switch_core(){
    current_repo_files=$2
    current_repo_folder=${current_repo_files%/*}
    rmc_bak="${current_repo_folder}/rmc_bak"
    jfrog_bak="${current_repo_folder}/jfrog_bak"
    if [[ -z ${current_repo_files} ]]; then
        rich_echo yellow "Current Repo file Must not be empty"
        return 127
    fi
    case $1 in
    tormc)
        if [[ ! -d ${jfrog_bak} ]]; then
            mkdir "${jfrog_bak}"
        fi
        # shellcheck disable=SC2115
#        rm -rf "${jfrog_bak}"/*
        if ls ${current_repo_files} > /dev/null 2>&1; then
            mv ${current_repo_files} "${jfrog_bak}"
        fi
        if [[ -d "${rmc_bak}" ]]; then
            cp "${rmc_bak}"/* "${current_repo_folder}"
        fi
        rich_echo skyblue "Switch to RMC Repo Successfully"
        ;;
    tojfrog)
        if [[ ! -d ${rmc_bak} ]]; then
            mkdir "${rmc_bak}"
        fi
        # shellcheck disable=SC2115
#        rm -rf "${rmc_bak}"/*
        if ls ${current_repo_files} > /dev/null 2>&1; then
            mv ${current_repo_files} "${rmc_bak}"
        fi
        if [[ -d ${jfrog_bak} ]]; then
            cp "${jfrog_bak}"/* "${current_repo_folder}"
        fi
        rich_echo skyblue "Switch to Jfrog Repo Successfully"
        ;;
    *)
        rich_echo red "Only tormc|tojfrog available."
        exit 127
        ;;
    esac
}
 
function switch2rmc() {
    case ${os_type} in
        rhel8)
            repo_switch_core tormc ${RHEL8_JFROG_REPO_FILE}
            ;;
        ubuntu20)
            repo_switch_core tormc ${UBUNTU_JFROG_REPO_FILE};;
        *);;
    esac
}
 
function switch2jfrog() {
    case ${os_type} in
        rhel8)
            repo_switch_core tojfrog ${RHEL8_JFROG_RMC_FILE};;
        ubuntu20)
            repo_switch_core tojfrog ${UBUNTU_RMC_REPO_FILE};;
        *);;
    esac
}
 
function switch_repo(){
    case ${destrepo} in
        rmc) switch2rmc "${os_type}";;
        jfrog) switch2jfrog "${os_type}";;
    esac
}
 
function add_jfrog_yum()
{
    # 1. add gpg key
    if ! wget "${gpgkey}" -O ${RHEL8_JFROG_REPO_GPGKEY} > /dev/null 2>&1 ; then
        rich_echo red "Add GPG Public key Failed"
        exit 127
    fi
    rich_echo skyblue "Add GPG Public key Successfully"
    # 2. add repo
    if [[ -z ${jfrog_url} ]]; then
        jfrog_url="jfa.webexgov-test.us/artifactory/w4d-rpm"
    fi
    cat << EOF > ${RHEL8_JFROG_REPO_FILE}
[w4d-rpm]
baseurl=https://${jfrog_user}:${jfrog_token}@${jfrog_url}
enabled = 1
gpgcheck = 1
repo_gpgcheck=1
gpgkey = file:///etc/pki/rpm-gpg/gpg_public_key.pub
gpgkey = https://${jfrog_user}:${jfrog_token}@${jfrog_url}/repodata/repomd.xml.key
name = os_updates JFrog Repository
priority = 1
module_hotfixes=1
EOF
    rich_echo skyblue "Add Jfrog Repository Successfully"
    # 3. switch repo to jfrog
    switch2jfrog
 
    # 4. make cache
    yum clean all
    yum makecache
    rich_echo skyblue "Refresh Repository Cache Successfully"
}
 
function add_jfrog_debian() {
    # 1. add gpg key
    if ! wget --no-check-certificate -qO - ${gpgkey} | apt-key add - ; then
        rich_echo red "Add GPG Public key Failed"
        exit 127
    fi
 
    rich_echo skyblue "Add GPG Public key Successfully"
    # 2. add repo
    if [[ -z ${jfrog_url} ]]; then
        jfrog_url="jfa.webexgov-test.us/artifactory/w4d-deb/"
    fi
 
    if [[ -z ${repo_component} ]]; then
        repo_component="focal main"
    fi
    # 3. create ubuntu repo auth file
    cat << EOF > ${UBUNTU_JFROG_REPO_AUTH_FILE}
machine jfa.webexgov-test.us
login ${jfrog_user}
password ${jfrog_token}
EOF
    rich_echo skyblue "Create Ubuntu Repo Auth File: ${UBUNTU_JFROG_REPO_AUTH_FILE} Successfully"
 
    # 4. add ubuntu repo
    echo "deb [trusted=yes] https://${jfrog_url} ${repo_component}" > ${UBUNTU_JFROG_REPO_FILE}
    rich_echo skyblue "Create Ubuntu Repo File: ${UBUNTU_JFROG_REPO_FILE} Successfully"
 
    # 5. switch repo to jfrog
    switch2jfrog
 
    # 6. Refresh Cache
    ubuntu_certificate_switch off
    apt update
}
 
function add_jfrog() {
    case ${os_type} in
    rhel8) add_jfrog_yum;;
    ubuntu20) add_jfrog_debian;;
    esac
}
 
function main() {
    _command=$1
    shift
    get_opts "$@"
    case ${_command} in
    add) add_jfrog;;
    switch) switch_repo;;
    list) rich_echo yellow "list command currently not implemented";;
    delete) rich_echo yellow "delete command currently not implemented" ;;
    --help) usage ;;
    *)
        rich_echo red "Only add|switch|list|delete commands available."
        exit 127
        ;;
    esac
}
 
main "$@"
